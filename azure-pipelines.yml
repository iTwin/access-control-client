trigger:
  - main

pr:
  drafts: false
  branches:
    include:
      - main

resources:
  repositories:
    - repository: build-pipeline-scripts
      type: git
      ref: master
      name: iModelTechnologies/imodeljs-build-pipeline-scripts

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: BuildPackages
        strategy:
          matrix:
            linux:
              imageName: "ubuntu-latest"
            mac:
              imageName: "macos-latest"
            windows:
              imageName: "windows-latest"
        pool:
          vmImage: $(imageName)
        steps:
          - script: npm install -g pnpm@6.19.0
            displayName: install pnpm globally

          - script: pnpm install
            displayName: "Install dependencies"

          - script: pnpm run build
            displayName: "Build"

          - script: pnpm run lint
            displayName: "Lint"

          - script: npm pack
            displayName: "Pack"

          # publish artifact
          - bash: |
              accessControlClientVersion=$(node -p "require('./package.json').version")
              accessControlClientName=$(node -p "require('./package.json').name")
              checkVer() {
                localVer=$1
                name=$2
                remoteVer=$(npm view $name version)
                if [ -z "$remoteVer" ]; then
                  remoteVer=0.0.0
                fi
                olderVer=$(printf '%s\n' "$localVer" "$remoteVer" | sort -V | head -n1)
                if [ "$localVer" != "$remoteVer" ] && [ "$remoteVer" = "$olderVer" ]; then
                  echo true
                else
                  echo false
                fi
              }
              updateClient=$(checkVer $accessControlClientVersion $accessControlClientName)
              if [ "$updateClient" = "true" ]; then
                echo "package publishing conditions are met."
                shouldPublish=true
              else
                echo "package publishing conditions not met."
                shouldPublish=true
              fi
              echo "##vso[task.setvariable variable=shouldPublish;isOutput=true]$shouldPublish"
              echo "##vso[task.setvariable variable=accessControlClientVersion;isOutput=true]$accessControlClientVersion"
              echo "##vso[task.setvariable variable=accessControlClientName;isOutput=true]$accessControlClientName"
            displayName: "Store Build Info"
            name: info
            condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/releases/3.0.2')), eq(variables['Agent.OS'], 'Linux'))
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.SourcesDirectory)/itwin-access-control-client-$(info.accessControlClientVersion).tgz"
              artifactName: AccessControlClient
            displayName: "Publish Access Control client"
            condition: and(succeeded(), eq(variables['info.shouldPublish'], 'true'))

  - stage: Publish
    displayName: Publish
    condition: and(succeeded(), eq(dependencies.Build.outputs['BuildPackages.linux.info.shouldPublish'], 'true'))
    dependsOn: Build

    jobs:
      - template: templates/npmjs-publish-deployment.yaml@build-pipeline-scripts
        parameters:
          path: "*.tgz"
          artifactName: AccessControlClient
          name: AccessControlClient
